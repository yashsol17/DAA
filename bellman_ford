//bellman_ford
#include<bits/stdc++.h>
using namespace std;

class Solution{
    public:
    vector<int> bellman_ford(int V, vector<vector<int>> &edges, int src) {
        vector<int> dist(V, INT_MAX);
        dist[src] = 0;
        for (int i = 0; i < V - 1; i++) {
            for(vector<int> &edge : edges) {
                int u = edge[0];
                int v = edge[1];
                int wt = edge[2];
                if(dist[u] != INT_MAX && dist[u] + wt < dist[v]) {
                    dist[v] = dist[u] + wt;
                } 
            }
        }
        return dist;
    }
};

int main() {
    Solution obj;
    int V, E, src;
    cout << "Enter number of vertices:" << endl;
    cin >> V;
    cout << "Enter number of edges:" << endl;
    cin >> E;
    cout << "Enter source vertex:" << endl;
    cin >> src;

    vector<vector<int>> edges(E, vector<int>(3));
    cout << "Enter source\tdestination\tweight" << endl;
    for(int i = 0; i < E; i++) {
        cin >> edges[i][0] >> edges[i][1] >> edges[i][2];
    }
     
    vector<int> dist = obj.bellman_ford(V, edges, src);

    cout<< "Shortest distances from source vertex " << src << " are:" << endl;
    for(auto d : dist) {
        cout << d << " ";  
    }
    cout << endl;

    return 0;
}
